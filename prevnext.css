## Macro title: Next and Previous Links
## Body processing: N
## Output: HTML
##
## Date created: 23-Feb-2012
## Date updated: 02-Apr-2012
## Developed by: Matthew J. Horn
## Installed by: Steve Goldberg
## From: http://confluence.atlassian.com/x/5AOTE
##
## Generates links for the next and previous pages in a document tree. 
## Ignores hierarchy so it moves up and down, regardless of what level the next or previous page is in.
##
## Can be used in a page or a layout template.
##
## In a layout template, you would do something like this:
## $helper.renderConfluenceMacro("{next_previous_links:NextImage=images/macros/forwardbutton.jpg|PrevImage=images/macros/backbutton.jpg|WrapAtEnd=false}")
<div id="prevnext"> 
## Define the parameters
## @param WrapAtEnd:title=Wrap At End?|type=boolean|desc=Determine if clicking "Next" on the last page should go back around to the first page. If false, then the "Next" link does nothing.
## @param usehome:title=Use "Home"?|type=boolean|desc=Sets the text of the middle button to "Home". If false, then the space's name is used.

## Define variables:
#if ($paramusehome)
	#set ($linktext = "Home")
#else
	#set ($linktext = $space.Name)
#end
#set ($myArray = [])
#set ($counter = 0)
#set ($prev = 0)
#set ($next = 0)
 
## Define the macro:
#macro( process $rp ) 
  #set( $pagelist = $rp.getSortedChildren() )
  #foreach( $child in $pagelist ) 
      #set ($canAdd = $myArray.add($child) )
      ## $content is a ContentEntityObject that refers to the current page. 
      ## Here, we compare the current page with the child. If they match, then we know what the next and prev pages are.
      #if ($content == $child)
          ## Catch the condition where we're on the first page:
          #if ($counter >= 1) 
            #set ($prev = $counter - 1)
          #end
          #set ($next = $counter + 1)
          ## Efficiency note: could probably exit the macro once this is done. Or after the next iteration (to get the "Next" page details).
      #end
      ## Increment the counter:
      #set ($counter = $counter + 1)
      ## Recursively process the document tree until all children have been run through.
      #if( $child.hasChildren() )#process( $child )#end
  #end
#end 
## Wrap the rest of the macro in a check to make sure it's a content page and not a root page.
 #if ($content.isRootLevel() == "false") 
 ## Use the $content object (of type ContentEntityObject) to get the root page
 ## Get root page:
   #set ($rootpage = $content.getAncestors().get(0))
   ## Call the macro on the page's root:
   #process($rootpage) 
 ## Process this when the user gets to the last page:
 #if ($next == $counter) 
   ## If you want users to wrap around to the beginning when they click "Next" at the last page:
   #if ($paramWrapAtEnd == "true")
     #set ($next = 0) 
   ## If you want no "wrapping":
   #else
     #set ($next = $counter - 1) 
   #end
 #end
 ## Could easily replace the basic arrow images with grayed out ones and dead links if you want no wrapping and/or are at the first page.
 ## Use the $config object (of type BootStrapManager) to get the domain name
 ## Define the Next and Previous links
 <span class="prev SteveButton"<a href="$config.getDomainName()$myArray.get($prev).getUrlPath()">&lt;&lt; $myArray.get($prev).getDisplayTitle()</a></span><span class="home SteveButton"><a href="$req.contextPath/display/$space.Key/">$!linktext</a></span><span class="next SteveButton"><a href="$config.getDomainName()$myArray.get($next).getUrlPath()">$myArray.get($next).getDisplayTitle() &gt;&gt;</a></span>
#end
</div>
<script type="text/javascript">
var panel = jQuery('#prevnext').html().replace(/&nbsp;/g,'');
jQuery('#prevnext').empty().append(panel);
</script>